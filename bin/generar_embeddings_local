#!/usr/bin/env python3

import mysql.connector
from sentence_transformers import SentenceTransformer
from lib.embeddings import get_modelo_id, obtener_etiquetas_y_embeddings, guardar_embedding
from lib.db_config import db_config


# Nombre del modelo de embedding en tu tabla MODELO
NOMBRE_MODELO_EMBEDDING = 'all-MiniLM-L6-v2'  # Ejemplo rápido y pequeño, puedes usar otro

# Cargar modelo local una vez
model = SentenceTransformer(NOMBRE_MODELO_EMBEDDING)

def generar_embedding_local(texto):
    # Devuelve un numpy array de floats
    return model.encode(texto, convert_to_numpy=True)

def main():
    conn = mysql.connector.connect(**db_config)
    modeloId = get_modelo_id(conn, NOMBRE_MODELO_EMBEDDING)
    etiquetas = obtener_etiquetas_y_embeddings(conn, modeloId)

    actualizados = 0
    saltados = 0

    for e in etiquetas:
        etiqueta_updated = e['etiquetaUpdatedAt']
        embedding_updated = e['embeddingUpdatedAt']

        actualizar = False
        if embedding_updated is None:
            actualizar = True
        else:
            if etiqueta_updated > embedding_updated:
                actualizar = True

        if actualizar:
            texto = (e['nombre'] or '') + ' ' + (e['descripcion'] or '')
            print(f"Generando embedding para etiqueta {e['etiquetaId']}: {texto[:50]}...")
            try:
                embedding = generar_embedding_local(f"{texto}")
                guardar_embedding(conn, modeloId, e['etiquetaId'], embedding)
                actualizados += 1
            except Exception as ex:
                print(f"Error generando/guardando embedding para etiquetaId {e['etiquetaId']}: {ex}")
        else:
            saltados += 1

    print(f"Embeddings actualizados: {actualizados}")
    print(f"Embeddings saltados (actualizados y al día): {saltados}")

    conn.close()

if __name__ == '__main__':
    main()